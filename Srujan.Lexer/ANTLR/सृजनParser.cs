//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Repos/Srujan/Srujan.Lexer/ANTLR/सृजन.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class सृजनParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, TYPE=13, BREAK=14, MAIN=15, IF=16, THEN=17, 
		ELSE=18, WHILE=19, PRINT=20, NEWLINE=21, SCAN=22, RETURN=23, CONTINUE=24, 
		ID=25, INT=26, DECIMAL=27, CHAR=28, STRING=29, PLUS=30, MOD=31, MINUS=32, 
		MULTIPLY=33, DIVIDE=34, EQUALS=35, LPAREN=36, RPAREN=37, SEMICOLON=38, 
		COMMENT=39, WS=40;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_inputStatement = 2, RULE_breakStatement = 3, 
		RULE_continueStatement = 4, RULE_arrayDeclaration = 5, RULE_arrayAssignment = 6, 
		RULE_arrayAccess = 7, RULE_arrayInitialization = 8, RULE_variableDeclaration = 9, 
		RULE_assignment = 10, RULE_ifStatement = 11, RULE_elseStatement = 12, 
		RULE_whileLoop = 13, RULE_printStatement = 14, RULE_condition = 15, RULE_comparisionOperator = 16, 
		RULE_expression = 17, RULE_term = 18, RULE_function = 19, RULE_functionName = 20, 
		RULE_factor = 21;
	public static readonly string[] ruleNames = {
		"program", "statement", "inputStatement", "breakStatement", "continueStatement", 
		"arrayDeclaration", "arrayAssignment", "arrayAccess", "arrayInitialization", 
		"variableDeclaration", "assignment", "ifStatement", "elseStatement", "whileLoop", 
		"printStatement", "condition", "comparisionOperator", "expression", "term", 
		"function", "functionName", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'['", "']'", "'{'", "','", "'}'", "'<'", "'>'", "'=='", 
		"'!='", "'>='", "'<='", null, "'\\u0935\\u093F\\u0930\\u093E\\u092E'", 
		"'\\u092A\\u094D\\u0930\\u0935\\u0947\\u0936'", "'\\u0905\\u0917\\u0930'", 
		"'\\u0924\\u094B'", "'\\u092F\\u093E'", "'\\u091C\\u092C\\u0924\\u0915'", 
		"'\\u0926\\u093F\\u0916\\u093E\\u090F\\u0901'", "'\\u092A\\u0902\\u0915\\u094D\\u0924\\u093F'", 
		"'\\u0938\\u094D\\u0935\\u0940\\u0915\\u093E\\u0930 \\u0915\\u0930\\u0947\\u0902'", 
		"'\\u0909\\u0924\\u094D\\u0924\\u0930'", "'\\u091C\\u093E\\u0930\\u0940 \\u0930\\u0916\\u0947\\u0902'", 
		null, null, null, null, null, "'+'", "'%'", "'-'", "'*'", "'/'", "'='", 
		"'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "TYPE", "BREAK", "MAIN", "IF", "THEN", "ELSE", "WHILE", "PRINT", 
		"NEWLINE", "SCAN", "RETURN", "CONTINUE", "ID", "INT", "DECIMAL", "CHAR", 
		"STRING", "PLUS", "MOD", "MINUS", "MULTIPLY", "DIVIDE", "EQUALS", "LPAREN", 
		"RPAREN", "SEMICOLON", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "सृजन.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static सृजनParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public सृजनParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public सृजनParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 44;
				statement();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 56188928L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializationContext arrayInitialization() {
			return GetRuleContext<ArrayInitializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputStatementContext inputStatement() {
			return GetRuleContext<InputStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52;
				whileLoop();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 53;
				printStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 54;
				function();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 55;
				breakStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 56;
				arrayDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 57;
				arrayAssignment();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 58;
				arrayInitialization();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 59;
				inputStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 60;
				continueStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCAN() { return GetToken(सृजनParser.SCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		public InputStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterInputStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitInputStatement(this);
		}
	}

	[RuleVersion(0)]
	public InputStatementContext inputStatement() {
		InputStatementContext _localctx = new InputStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_inputStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(SCAN);
			State = 64;
			Match(ID);
			State = 65;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(सृजनParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(BREAK);
			State = 68;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(सृजनParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(CONTINUE);
			State = 71;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(सृजनParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_arrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(ID);
			State = 74;
			Match(T__0);
			State = 75;
			Match(TYPE);
			State = 76;
			Match(T__1);
			State = 77;
			expression();
			State = 78;
			Match(T__2);
			State = 79;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(सृजनParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(ID);
			State = 82;
			Match(T__1);
			State = 83;
			expression();
			State = 84;
			Match(T__2);
			State = 85;
			Match(EQUALS);
			State = 86;
			expression();
			State = 87;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(ID);
			State = 90;
			Match(T__1);
			State = 91;
			expression();
			State = 92;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(सृजनParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayInitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterArrayInitialization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitArrayInitialization(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializationContext arrayInitialization() {
		ArrayInitializationContext _localctx = new ArrayInitializationContext(Context, State);
		EnterRule(_localctx, 16, RULE_arrayInitialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(ID);
			State = 95;
			Match(EQUALS);
			State = 96;
			Match(T__3);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69759664128L) != 0)) {
				{
				State = 97;
				expression();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 98;
					Match(T__4);
					State = 99;
					expression();
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 107;
			Match(T__5);
			State = 108;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(सृजनParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(सृजनParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(ID);
			State = 111;
			Match(T__0);
			State = 112;
			Match(TYPE);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 113;
				Match(EQUALS);
				State = 114;
				expression();
				}
			}

			State = 117;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(सृजनParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(ID);
			State = 120;
			Match(EQUALS);
			State = 121;
			expression();
			State = 122;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(सृजनParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(सृजनParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(IF);
			State = 125;
			condition();
			State = 126;
			Match(THEN);
			State = 127;
			Match(T__3);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 128;
				statement();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 56188928L) != 0) );
			State = 133;
			Match(T__5);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 134;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(सृजनParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(ELSE);
			State = 138;
			Match(T__3);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 139;
				statement();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 56188928L) != 0) );
			State = 144;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(सृजनParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(WHILE);
			State = 147;
			condition();
			State = 148;
			Match(T__3);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 149;
				statement();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 56188928L) != 0) );
			State = 154;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(सृजनParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(सृजनParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(सृजनParser.NEWLINE, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_printStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(PRINT);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 157;
				Match(NEWLINE);
				}
			}

			State = 160;
			expression();
			State = 161;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisionOperatorContext comparisionOperator() {
			return GetRuleContext<ComparisionOperatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 30, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			expression();
			State = 164;
			comparisionOperator();
			State = 165;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisionOperatorContext : ParserRuleContext {
		public ComparisionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterComparisionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitComparisionOperator(this);
		}
	}

	[RuleVersion(0)]
	public ComparisionOperatorContext comparisionOperator() {
		ComparisionOperatorContext _localctx = new ComparisionOperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_comparisionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(सृजनParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(सृजनParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(सृजनParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(सृजनParser.MINUS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			term();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 170;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 171;
				term();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTIPLY() { return GetTokens(सृजनParser.MULTIPLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY(int i) {
			return GetToken(सृजनParser.MULTIPLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIVIDE() { return GetTokens(सृजनParser.DIVIDE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE(int i) {
			return GetToken(सृजनParser.DIVIDE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(सृजनParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(सृजनParser.MOD, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 36, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			factor();
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27917287424L) != 0)) {
				{
				{
				State = 178;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 27917287424L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 179;
				factor();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(सृजनParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(सृजनParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(सृजनParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(सृजनParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(सृजनParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(सृजनParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(सृजनParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RETURN() { return GetTokens(सृजनParser.RETURN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN(int i) {
			return GetToken(सृजनParser.RETURN, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 38, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(TYPE);
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 186;
				functionName();
				}
				break;
			case MAIN:
				{
				State = 187;
				Match(MAIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 190;
			Match(LPAREN);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE) {
				{
				{
				State = 191;
				Match(TYPE);
				State = 192;
				Match(ID);
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 193;
					Match(T__4);
					State = 194;
					Match(TYPE);
					State = 195;
					Match(ID);
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206;
			Match(RPAREN);
			State = 207;
			Match(T__3);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 208;
				statement();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 56188928L) != 0) );
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RETURN) {
				{
				{
				State = 213;
				Match(RETURN);
				State = 214;
				statement();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(सृजनParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(सृजनParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(सृजनParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(सृजनParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(सृजनParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(सृजनParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(सृजनParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IसृजनListener typedListener = listener as IसृजनListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 42, RULE_factor);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				Match(LPAREN);
				State = 225;
				expression();
				State = 226;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				Match(CHAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 230;
				Match(STRING);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231;
				Match(ID);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 232;
				Match(DECIMAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 233;
				arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,237,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,4,0,46,8,0,11,0,12,0,47,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,1,62,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
		1,8,1,8,1,8,1,8,1,8,1,8,5,8,101,8,8,10,8,12,8,104,9,8,3,8,106,8,8,1,8,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,116,8,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,4,11,130,8,11,11,11,12,11,131,1,11,1,11,3,
		11,136,8,11,1,12,1,12,1,12,4,12,141,8,12,11,12,12,12,142,1,12,1,12,1,13,
		1,13,1,13,1,13,4,13,151,8,13,11,13,12,13,152,1,13,1,13,1,14,1,14,3,14,
		159,8,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,5,
		17,173,8,17,10,17,12,17,176,9,17,1,18,1,18,1,18,5,18,181,8,18,10,18,12,
		18,184,9,18,1,19,1,19,1,19,3,19,189,8,19,1,19,1,19,1,19,1,19,1,19,1,19,
		5,19,197,8,19,10,19,12,19,200,9,19,5,19,202,8,19,10,19,12,19,205,9,19,
		1,19,1,19,1,19,4,19,210,8,19,11,19,12,19,211,1,19,1,19,5,19,216,8,19,10,
		19,12,19,219,9,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,3,21,235,8,21,1,21,0,0,22,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,0,3,1,0,7,12,2,0,30,30,32,32,2,0,31,31,
		33,34,247,0,45,1,0,0,0,2,61,1,0,0,0,4,63,1,0,0,0,6,67,1,0,0,0,8,70,1,0,
		0,0,10,73,1,0,0,0,12,81,1,0,0,0,14,89,1,0,0,0,16,94,1,0,0,0,18,110,1,0,
		0,0,20,119,1,0,0,0,22,124,1,0,0,0,24,137,1,0,0,0,26,146,1,0,0,0,28,156,
		1,0,0,0,30,163,1,0,0,0,32,167,1,0,0,0,34,169,1,0,0,0,36,177,1,0,0,0,38,
		185,1,0,0,0,40,222,1,0,0,0,42,234,1,0,0,0,44,46,3,2,1,0,45,44,1,0,0,0,
		46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,1,1,0,0,0,49,62,3,18,9,0,
		50,62,3,20,10,0,51,62,3,22,11,0,52,62,3,26,13,0,53,62,3,28,14,0,54,62,
		3,38,19,0,55,62,3,6,3,0,56,62,3,10,5,0,57,62,3,12,6,0,58,62,3,16,8,0,59,
		62,3,4,2,0,60,62,3,8,4,0,61,49,1,0,0,0,61,50,1,0,0,0,61,51,1,0,0,0,61,
		52,1,0,0,0,61,53,1,0,0,0,61,54,1,0,0,0,61,55,1,0,0,0,61,56,1,0,0,0,61,
		57,1,0,0,0,61,58,1,0,0,0,61,59,1,0,0,0,61,60,1,0,0,0,62,3,1,0,0,0,63,64,
		5,22,0,0,64,65,5,25,0,0,65,66,5,38,0,0,66,5,1,0,0,0,67,68,5,14,0,0,68,
		69,5,38,0,0,69,7,1,0,0,0,70,71,5,24,0,0,71,72,5,38,0,0,72,9,1,0,0,0,73,
		74,5,25,0,0,74,75,5,1,0,0,75,76,5,13,0,0,76,77,5,2,0,0,77,78,3,34,17,0,
		78,79,5,3,0,0,79,80,5,38,0,0,80,11,1,0,0,0,81,82,5,25,0,0,82,83,5,2,0,
		0,83,84,3,34,17,0,84,85,5,3,0,0,85,86,5,35,0,0,86,87,3,34,17,0,87,88,5,
		38,0,0,88,13,1,0,0,0,89,90,5,25,0,0,90,91,5,2,0,0,91,92,3,34,17,0,92,93,
		5,3,0,0,93,15,1,0,0,0,94,95,5,25,0,0,95,96,5,35,0,0,96,105,5,4,0,0,97,
		102,3,34,17,0,98,99,5,5,0,0,99,101,3,34,17,0,100,98,1,0,0,0,101,104,1,
		0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,
		105,97,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,107,108,5,6,0,0,108,109,
		5,38,0,0,109,17,1,0,0,0,110,111,5,25,0,0,111,112,5,1,0,0,112,115,5,13,
		0,0,113,114,5,35,0,0,114,116,3,34,17,0,115,113,1,0,0,0,115,116,1,0,0,0,
		116,117,1,0,0,0,117,118,5,38,0,0,118,19,1,0,0,0,119,120,5,25,0,0,120,121,
		5,35,0,0,121,122,3,34,17,0,122,123,5,38,0,0,123,21,1,0,0,0,124,125,5,16,
		0,0,125,126,3,30,15,0,126,127,5,17,0,0,127,129,5,4,0,0,128,130,3,2,1,0,
		129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,133,
		1,0,0,0,133,135,5,6,0,0,134,136,3,24,12,0,135,134,1,0,0,0,135,136,1,0,
		0,0,136,23,1,0,0,0,137,138,5,18,0,0,138,140,5,4,0,0,139,141,3,2,1,0,140,
		139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,
		0,0,0,144,145,5,6,0,0,145,25,1,0,0,0,146,147,5,19,0,0,147,148,3,30,15,
		0,148,150,5,4,0,0,149,151,3,2,1,0,150,149,1,0,0,0,151,152,1,0,0,0,152,
		150,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,155,5,6,0,0,155,27,1,0,
		0,0,156,158,5,20,0,0,157,159,5,21,0,0,158,157,1,0,0,0,158,159,1,0,0,0,
		159,160,1,0,0,0,160,161,3,34,17,0,161,162,5,38,0,0,162,29,1,0,0,0,163,
		164,3,34,17,0,164,165,3,32,16,0,165,166,3,34,17,0,166,31,1,0,0,0,167,168,
		7,0,0,0,168,33,1,0,0,0,169,174,3,36,18,0,170,171,7,1,0,0,171,173,3,36,
		18,0,172,170,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,
		35,1,0,0,0,176,174,1,0,0,0,177,182,3,42,21,0,178,179,7,2,0,0,179,181,3,
		42,21,0,180,178,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,
		0,183,37,1,0,0,0,184,182,1,0,0,0,185,188,5,13,0,0,186,189,3,40,20,0,187,
		189,5,15,0,0,188,186,1,0,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,203,5,
		36,0,0,191,192,5,13,0,0,192,198,5,25,0,0,193,194,5,5,0,0,194,195,5,13,
		0,0,195,197,5,25,0,0,196,193,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,
		199,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,201,191,1,0,0,0,202,205,1,
		0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,
		206,207,5,37,0,0,207,209,5,4,0,0,208,210,3,2,1,0,209,208,1,0,0,0,210,211,
		1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,217,1,0,0,0,213,214,5,23,0,
		0,214,216,3,2,1,0,215,213,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,
		218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,6,0,0,221,39,1,0,
		0,0,222,223,5,25,0,0,223,41,1,0,0,0,224,225,5,36,0,0,225,226,3,34,17,0,
		226,227,5,37,0,0,227,235,1,0,0,0,228,235,5,26,0,0,229,235,5,28,0,0,230,
		235,5,29,0,0,231,235,5,25,0,0,232,235,5,27,0,0,233,235,3,14,7,0,234,224,
		1,0,0,0,234,228,1,0,0,0,234,229,1,0,0,0,234,230,1,0,0,0,234,231,1,0,0,
		0,234,232,1,0,0,0,234,233,1,0,0,0,235,43,1,0,0,0,18,47,61,102,105,115,
		131,135,142,152,158,174,182,188,198,203,211,217,234
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
