//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Repos/Srujan/Srujan.Lexer/ANTLR/सृजन.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class सृजनLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, TYPE=13, BREAK=14, MAIN=15, IF=16, THEN=17, 
		ELSE=18, WHILE=19, PRINT=20, NEWLINE=21, SCAN=22, RETURN=23, CONTINUE=24, 
		ID=25, INT=26, DECIMAL=27, CHAR=28, STRING=29, PLUS=30, MOD=31, MINUS=32, 
		MULTIPLY=33, DIVIDE=34, EQUALS=35, LPAREN=36, RPAREN=37, SEMICOLON=38, 
		COMMENT=39, WS=40;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "TYPE", "BREAK", "MAIN", "IF", "THEN", "ELSE", 
		"WHILE", "PRINT", "NEWLINE", "SCAN", "RETURN", "CONTINUE", "ID", "INT", 
		"DECIMAL", "CHAR", "STRING", "PLUS", "MOD", "MINUS", "MULTIPLY", "DIVIDE", 
		"EQUALS", "LPAREN", "RPAREN", "SEMICOLON", "COMMENT", "WS"
	};


	public सृजनLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public सृजनLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'['", "']'", "'{'", "','", "'}'", "'<'", "'>'", "'=='", 
		"'!='", "'>='", "'<='", null, "'\\u0935\\u093F\\u0930\\u093E\\u092E'", 
		"'\\u092A\\u094D\\u0930\\u0935\\u0947\\u0936'", "'\\u0905\\u0917\\u0930'", 
		"'\\u0924\\u094B'", "'\\u092F\\u093E'", "'\\u091C\\u092C\\u0924\\u0915'", 
		"'\\u0926\\u093F\\u0916\\u093E\\u090F\\u0901'", "'\\u092A\\u0902\\u0915\\u094D\\u0924\\u093F'", 
		"'\\u0938\\u094D\\u0935\\u0940\\u0915\\u093E\\u0930 \\u0915\\u0930\\u0947\\u0902'", 
		"'\\u0909\\u0924\\u094D\\u0924\\u0930'", "'\\u091C\\u093E\\u0930\\u0940 \\u0930\\u0916\\u0947\\u0902'", 
		null, null, null, null, null, "'+'", "'%'", "'-'", "'*'", "'/'", "'='", 
		"'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "TYPE", "BREAK", "MAIN", "IF", "THEN", "ELSE", "WHILE", "PRINT", 
		"NEWLINE", "SCAN", "RETURN", "CONTINUE", "ID", "INT", "DECIMAL", "CHAR", 
		"STRING", "PLUS", "MOD", "MINUS", "MULTIPLY", "DIVIDE", "EQUALS", "LPAREN", 
		"RPAREN", "SEMICOLON", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "सृजन.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static सृजनLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,40,268,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,3,12,126,8,12,1,13,1,13,1,13,1,13,1,13,1,
		13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,
		16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,4,24,200,8,24,11,
		24,12,24,201,1,25,4,25,205,8,25,11,25,12,25,206,1,26,1,26,1,26,4,26,212,
		8,26,11,26,12,26,213,3,26,216,8,26,1,27,1,27,1,27,1,27,1,28,1,28,5,28,
		224,8,28,10,28,12,28,227,9,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
		1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
		1,38,1,38,5,38,253,8,38,10,38,12,38,256,9,38,1,38,1,38,1,38,1,38,1,39,
		4,39,263,8,39,11,39,12,39,264,1,39,1,39,2,225,254,0,40,1,1,3,2,5,3,7,4,
		9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,1,0,
		3,2,0,95,95,2304,2431,1,0,48,57,3,0,9,10,13,13,32,32,277,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,1,81,1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,0,7,87,1,0,0,0,9,89,1,0,0,0,11,
		91,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,97,1,0,0,0,19,100,1,0,0,0,21,
		103,1,0,0,0,23,106,1,0,0,0,25,125,1,0,0,0,27,127,1,0,0,0,29,133,1,0,0,
		0,31,140,1,0,0,0,33,144,1,0,0,0,35,147,1,0,0,0,37,150,1,0,0,0,39,155,1,
		0,0,0,41,162,1,0,0,0,43,169,1,0,0,0,45,182,1,0,0,0,47,188,1,0,0,0,49,199,
		1,0,0,0,51,204,1,0,0,0,53,208,1,0,0,0,55,217,1,0,0,0,57,221,1,0,0,0,59,
		230,1,0,0,0,61,232,1,0,0,0,63,234,1,0,0,0,65,236,1,0,0,0,67,238,1,0,0,
		0,69,240,1,0,0,0,71,242,1,0,0,0,73,244,1,0,0,0,75,246,1,0,0,0,77,248,1,
		0,0,0,79,262,1,0,0,0,81,82,5,58,0,0,82,2,1,0,0,0,83,84,5,91,0,0,84,4,1,
		0,0,0,85,86,5,93,0,0,86,6,1,0,0,0,87,88,5,123,0,0,88,8,1,0,0,0,89,90,5,
		44,0,0,90,10,1,0,0,0,91,92,5,125,0,0,92,12,1,0,0,0,93,94,5,60,0,0,94,14,
		1,0,0,0,95,96,5,62,0,0,96,16,1,0,0,0,97,98,5,61,0,0,98,99,5,61,0,0,99,
		18,1,0,0,0,100,101,5,33,0,0,101,102,5,61,0,0,102,20,1,0,0,0,103,104,5,
		62,0,0,104,105,5,61,0,0,105,22,1,0,0,0,106,107,5,60,0,0,107,108,5,61,0,
		0,108,24,1,0,0,0,109,110,5,2309,0,0,110,111,5,2306,0,0,111,126,5,2325,
		0,0,112,113,5,2309,0,0,113,114,5,2325,0,0,114,115,5,2381,0,0,115,116,5,
		2359,0,0,116,126,5,2352,0,0,117,118,5,2340,0,0,118,119,5,2366,0,0,119,
		126,5,2352,0,0,120,121,5,2342,0,0,121,122,5,2358,0,0,122,123,5,2350,0,
		0,123,124,5,2354,0,0,124,126,5,2357,0,0,125,109,1,0,0,0,125,112,1,0,0,
		0,125,117,1,0,0,0,125,120,1,0,0,0,126,26,1,0,0,0,127,128,5,2357,0,0,128,
		129,5,2367,0,0,129,130,5,2352,0,0,130,131,5,2366,0,0,131,132,5,2350,0,
		0,132,28,1,0,0,0,133,134,5,2346,0,0,134,135,5,2381,0,0,135,136,5,2352,
		0,0,136,137,5,2357,0,0,137,138,5,2375,0,0,138,139,5,2358,0,0,139,30,1,
		0,0,0,140,141,5,2309,0,0,141,142,5,2327,0,0,142,143,5,2352,0,0,143,32,
		1,0,0,0,144,145,5,2340,0,0,145,146,5,2379,0,0,146,34,1,0,0,0,147,148,5,
		2351,0,0,148,149,5,2366,0,0,149,36,1,0,0,0,150,151,5,2332,0,0,151,152,
		5,2348,0,0,152,153,5,2340,0,0,153,154,5,2325,0,0,154,38,1,0,0,0,155,156,
		5,2342,0,0,156,157,5,2367,0,0,157,158,5,2326,0,0,158,159,5,2366,0,0,159,
		160,5,2319,0,0,160,161,5,2305,0,0,161,40,1,0,0,0,162,163,5,2346,0,0,163,
		164,5,2306,0,0,164,165,5,2325,0,0,165,166,5,2381,0,0,166,167,5,2340,0,
		0,167,168,5,2367,0,0,168,42,1,0,0,0,169,170,5,2360,0,0,170,171,5,2381,
		0,0,171,172,5,2357,0,0,172,173,5,2368,0,0,173,174,5,2325,0,0,174,175,5,
		2366,0,0,175,176,5,2352,0,0,176,177,5,32,0,0,177,178,5,2325,0,0,178,179,
		5,2352,0,0,179,180,5,2375,0,0,180,181,5,2306,0,0,181,44,1,0,0,0,182,183,
		5,2313,0,0,183,184,5,2340,0,0,184,185,5,2381,0,0,185,186,5,2340,0,0,186,
		187,5,2352,0,0,187,46,1,0,0,0,188,189,5,2332,0,0,189,190,5,2366,0,0,190,
		191,5,2352,0,0,191,192,5,2368,0,0,192,193,5,32,0,0,193,194,5,2352,0,0,
		194,195,5,2326,0,0,195,196,5,2375,0,0,196,197,5,2306,0,0,197,48,1,0,0,
		0,198,200,7,0,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,
		202,1,0,0,0,202,50,1,0,0,0,203,205,7,1,0,0,204,203,1,0,0,0,205,206,1,0,
		0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,52,1,0,0,0,208,215,3,51,25,0,209,
		211,5,46,0,0,210,212,7,1,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,
		0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,209,1,0,0,0,215,216,1,0,0,0,
		216,54,1,0,0,0,217,218,5,39,0,0,218,219,9,0,0,0,219,220,5,39,0,0,220,56,
		1,0,0,0,221,225,5,34,0,0,222,224,9,0,0,0,223,222,1,0,0,0,224,227,1,0,0,
		0,225,226,1,0,0,0,225,223,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,
		229,5,34,0,0,229,58,1,0,0,0,230,231,5,43,0,0,231,60,1,0,0,0,232,233,5,
		37,0,0,233,62,1,0,0,0,234,235,5,45,0,0,235,64,1,0,0,0,236,237,5,42,0,0,
		237,66,1,0,0,0,238,239,5,47,0,0,239,68,1,0,0,0,240,241,5,61,0,0,241,70,
		1,0,0,0,242,243,5,40,0,0,243,72,1,0,0,0,244,245,5,41,0,0,245,74,1,0,0,
		0,246,247,5,59,0,0,247,76,1,0,0,0,248,249,5,47,0,0,249,250,5,47,0,0,250,
		254,1,0,0,0,251,253,9,0,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,255,1,
		0,0,0,254,252,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,10,0,0,
		258,259,1,0,0,0,259,260,6,38,0,0,260,78,1,0,0,0,261,263,7,2,0,0,262,261,
		1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,
		0,266,267,6,39,0,0,267,80,1,0,0,0,9,0,125,201,206,213,215,225,254,264,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
