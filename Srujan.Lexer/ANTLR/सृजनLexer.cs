//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Repos/Srujan/Srujan.Lexer/ANTLR/सृजन.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class सृजनLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, TYPE=21, BREAK=22, MAIN=23, IF=24, THEN=25, 
		ELSE=26, WHILE=27, PRINT=28, NEWLINE=29, SCAN=30, RETURN=31, CONTINUE=32, 
		TRUE=33, FALSE=34, ID=35, INT=36, DECIMAL=37, CHAR=38, STRING=39, PLUS=40, 
		MOD=41, MINUS=42, MULTIPLY=43, DIVIDE=44, EQUALS=45, LPAREN=46, RPAREN=47, 
		SEMICOLON=48, COMMENT=49, WS=50;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "TYPE", "BREAK", "MAIN", "IF", "THEN", "ELSE", 
		"WHILE", "PRINT", "NEWLINE", "SCAN", "RETURN", "CONTINUE", "TRUE", "FALSE", 
		"ID", "INT", "DECIMAL", "CHAR", "STRING", "PLUS", "MOD", "MINUS", "MULTIPLY", 
		"DIVIDE", "EQUALS", "LPAREN", "RPAREN", "SEMICOLON", "COMMENT", "WS"
	};


	public सृजनLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public सृजनLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'['", "']'", "'{'", "','", "'}'", "'<'", "'>'", "'=='", 
		"'!='", "'>='", "'<='", "'&&'", "'||'", "'&'", "'|'", "'^'", "'<<'", "'>>'", 
		"'~'", null, "'\\u0935\\u093F\\u0930\\u093E\\u092E'", "'\\u092A\\u094D\\u0930\\u0935\\u0947\\u0936'", 
		"'\\u0905\\u0917\\u0930'", "'\\u0924\\u094B'", "'\\u092F\\u093E'", "'\\u091C\\u092C\\u0924\\u0915'", 
		"'\\u0926\\u093F\\u0916\\u093E\\u090F\\u0901'", "'\\u092A\\u0902\\u0915\\u094D\\u0924\\u093F'", 
		"'\\u0938\\u094D\\u0935\\u0940\\u0915\\u093E\\u0930 \\u0915\\u0930\\u0947\\u0902'", 
		"'\\u0909\\u0924\\u094D\\u0924\\u0930'", "'\\u091C\\u093E\\u0930\\u0940 \\u0930\\u0916\\u0947\\u0902'", 
		"'\\u0938\\u0939\\u0940'", "'\\u0917\\u0932\\u0924'", null, null, null, 
		null, null, "'+'", "'%'", "'-'", "'*'", "'/'", "'='", "'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "TYPE", "BREAK", 
		"MAIN", "IF", "THEN", "ELSE", "WHILE", "PRINT", "NEWLINE", "SCAN", "RETURN", 
		"CONTINUE", "TRUE", "FALSE", "ID", "INT", "DECIMAL", "CHAR", "STRING", 
		"PLUS", "MOD", "MINUS", "MULTIPLY", "DIVIDE", "EQUALS", "LPAREN", "RPAREN", 
		"SEMICOLON", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "सृजन.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static सृजनLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,50,316,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
		1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,3,20,166,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,
		25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,
		33,1,33,1,34,4,34,248,8,34,11,34,12,34,249,1,35,4,35,253,8,35,11,35,12,
		35,254,1,36,1,36,1,36,4,36,260,8,36,11,36,12,36,261,3,36,264,8,36,1,37,
		1,37,1,37,1,37,1,38,1,38,5,38,272,8,38,10,38,12,38,275,9,38,1,38,1,38,
		1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
		1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,5,48,301,8,48,10,48,12,48,304,
		9,48,1,48,1,48,1,48,1,48,1,49,4,49,311,8,49,11,49,12,49,312,1,49,1,49,
		2,273,302,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,
		48,97,49,99,50,1,0,3,2,0,95,95,2304,2431,1,0,48,57,3,0,9,10,13,13,32,32,
		325,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,105,1,0,0,0,7,107,1,0,0,0,9,109,
		1,0,0,0,11,111,1,0,0,0,13,113,1,0,0,0,15,115,1,0,0,0,17,117,1,0,0,0,19,
		120,1,0,0,0,21,123,1,0,0,0,23,126,1,0,0,0,25,129,1,0,0,0,27,132,1,0,0,
		0,29,135,1,0,0,0,31,137,1,0,0,0,33,139,1,0,0,0,35,141,1,0,0,0,37,144,1,
		0,0,0,39,147,1,0,0,0,41,165,1,0,0,0,43,167,1,0,0,0,45,173,1,0,0,0,47,180,
		1,0,0,0,49,184,1,0,0,0,51,187,1,0,0,0,53,190,1,0,0,0,55,195,1,0,0,0,57,
		202,1,0,0,0,59,209,1,0,0,0,61,222,1,0,0,0,63,228,1,0,0,0,65,238,1,0,0,
		0,67,242,1,0,0,0,69,247,1,0,0,0,71,252,1,0,0,0,73,256,1,0,0,0,75,265,1,
		0,0,0,77,269,1,0,0,0,79,278,1,0,0,0,81,280,1,0,0,0,83,282,1,0,0,0,85,284,
		1,0,0,0,87,286,1,0,0,0,89,288,1,0,0,0,91,290,1,0,0,0,93,292,1,0,0,0,95,
		294,1,0,0,0,97,296,1,0,0,0,99,310,1,0,0,0,101,102,5,58,0,0,102,2,1,0,0,
		0,103,104,5,91,0,0,104,4,1,0,0,0,105,106,5,93,0,0,106,6,1,0,0,0,107,108,
		5,123,0,0,108,8,1,0,0,0,109,110,5,44,0,0,110,10,1,0,0,0,111,112,5,125,
		0,0,112,12,1,0,0,0,113,114,5,60,0,0,114,14,1,0,0,0,115,116,5,62,0,0,116,
		16,1,0,0,0,117,118,5,61,0,0,118,119,5,61,0,0,119,18,1,0,0,0,120,121,5,
		33,0,0,121,122,5,61,0,0,122,20,1,0,0,0,123,124,5,62,0,0,124,125,5,61,0,
		0,125,22,1,0,0,0,126,127,5,60,0,0,127,128,5,61,0,0,128,24,1,0,0,0,129,
		130,5,38,0,0,130,131,5,38,0,0,131,26,1,0,0,0,132,133,5,124,0,0,133,134,
		5,124,0,0,134,28,1,0,0,0,135,136,5,38,0,0,136,30,1,0,0,0,137,138,5,124,
		0,0,138,32,1,0,0,0,139,140,5,94,0,0,140,34,1,0,0,0,141,142,5,60,0,0,142,
		143,5,60,0,0,143,36,1,0,0,0,144,145,5,62,0,0,145,146,5,62,0,0,146,38,1,
		0,0,0,147,148,5,126,0,0,148,40,1,0,0,0,149,150,5,2309,0,0,150,151,5,2306,
		0,0,151,166,5,2325,0,0,152,153,5,2309,0,0,153,154,5,2325,0,0,154,155,5,
		2381,0,0,155,156,5,2359,0,0,156,166,5,2352,0,0,157,158,5,2340,0,0,158,
		159,5,2366,0,0,159,166,5,2352,0,0,160,161,5,2342,0,0,161,162,5,2358,0,
		0,162,163,5,2350,0,0,163,164,5,2354,0,0,164,166,5,2357,0,0,165,149,1,0,
		0,0,165,152,1,0,0,0,165,157,1,0,0,0,165,160,1,0,0,0,166,42,1,0,0,0,167,
		168,5,2357,0,0,168,169,5,2367,0,0,169,170,5,2352,0,0,170,171,5,2366,0,
		0,171,172,5,2350,0,0,172,44,1,0,0,0,173,174,5,2346,0,0,174,175,5,2381,
		0,0,175,176,5,2352,0,0,176,177,5,2357,0,0,177,178,5,2375,0,0,178,179,5,
		2358,0,0,179,46,1,0,0,0,180,181,5,2309,0,0,181,182,5,2327,0,0,182,183,
		5,2352,0,0,183,48,1,0,0,0,184,185,5,2340,0,0,185,186,5,2379,0,0,186,50,
		1,0,0,0,187,188,5,2351,0,0,188,189,5,2366,0,0,189,52,1,0,0,0,190,191,5,
		2332,0,0,191,192,5,2348,0,0,192,193,5,2340,0,0,193,194,5,2325,0,0,194,
		54,1,0,0,0,195,196,5,2342,0,0,196,197,5,2367,0,0,197,198,5,2326,0,0,198,
		199,5,2366,0,0,199,200,5,2319,0,0,200,201,5,2305,0,0,201,56,1,0,0,0,202,
		203,5,2346,0,0,203,204,5,2306,0,0,204,205,5,2325,0,0,205,206,5,2381,0,
		0,206,207,5,2340,0,0,207,208,5,2367,0,0,208,58,1,0,0,0,209,210,5,2360,
		0,0,210,211,5,2381,0,0,211,212,5,2357,0,0,212,213,5,2368,0,0,213,214,5,
		2325,0,0,214,215,5,2366,0,0,215,216,5,2352,0,0,216,217,5,32,0,0,217,218,
		5,2325,0,0,218,219,5,2352,0,0,219,220,5,2375,0,0,220,221,5,2306,0,0,221,
		60,1,0,0,0,222,223,5,2313,0,0,223,224,5,2340,0,0,224,225,5,2381,0,0,225,
		226,5,2340,0,0,226,227,5,2352,0,0,227,62,1,0,0,0,228,229,5,2332,0,0,229,
		230,5,2366,0,0,230,231,5,2352,0,0,231,232,5,2368,0,0,232,233,5,32,0,0,
		233,234,5,2352,0,0,234,235,5,2326,0,0,235,236,5,2375,0,0,236,237,5,2306,
		0,0,237,64,1,0,0,0,238,239,5,2360,0,0,239,240,5,2361,0,0,240,241,5,2368,
		0,0,241,66,1,0,0,0,242,243,5,2327,0,0,243,244,5,2354,0,0,244,245,5,2340,
		0,0,245,68,1,0,0,0,246,248,7,0,0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,
		247,1,0,0,0,249,250,1,0,0,0,250,70,1,0,0,0,251,253,7,1,0,0,252,251,1,0,
		0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,72,1,0,0,0,256,
		263,3,71,35,0,257,259,5,46,0,0,258,260,7,1,0,0,259,258,1,0,0,0,260,261,
		1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,257,1,0,0,
		0,263,264,1,0,0,0,264,74,1,0,0,0,265,266,5,39,0,0,266,267,9,0,0,0,267,
		268,5,39,0,0,268,76,1,0,0,0,269,273,5,34,0,0,270,272,9,0,0,0,271,270,1,
		0,0,0,272,275,1,0,0,0,273,274,1,0,0,0,273,271,1,0,0,0,274,276,1,0,0,0,
		275,273,1,0,0,0,276,277,5,34,0,0,277,78,1,0,0,0,278,279,5,43,0,0,279,80,
		1,0,0,0,280,281,5,37,0,0,281,82,1,0,0,0,282,283,5,45,0,0,283,84,1,0,0,
		0,284,285,5,42,0,0,285,86,1,0,0,0,286,287,5,47,0,0,287,88,1,0,0,0,288,
		289,5,61,0,0,289,90,1,0,0,0,290,291,5,40,0,0,291,92,1,0,0,0,292,293,5,
		41,0,0,293,94,1,0,0,0,294,295,5,59,0,0,295,96,1,0,0,0,296,297,5,47,0,0,
		297,298,5,47,0,0,298,302,1,0,0,0,299,301,9,0,0,0,300,299,1,0,0,0,301,304,
		1,0,0,0,302,303,1,0,0,0,302,300,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,
		0,305,306,5,10,0,0,306,307,1,0,0,0,307,308,6,48,0,0,308,98,1,0,0,0,309,
		311,7,2,0,0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,
		0,0,0,313,314,1,0,0,0,314,315,6,49,0,0,315,100,1,0,0,0,9,0,165,249,254,
		261,263,273,302,312,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
